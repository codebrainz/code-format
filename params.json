{"name":"Geany Code Format Plugin","tagline":"A code formatting plugin for Geany using ClangFormat.","body":"Geany Code Format Plugin\r\n========================\r\n\r\nThe Code Format plugin allows simple and precise formatting of\r\nC, C++ and Objective-C source code using the excellent utility\r\n`clang-format` provided as part of the `ClangTools`.\r\n\r\nFeatures\r\n--------\r\n\r\n* Accurate lexical code formatting using Clang frontend.\r\n* Runs `clang-format` as an external process so you can swap out and\r\nupgrade versions at will without touching the plugin.\r\n* Auto-formatting; never worry about formatting again, let the plugin\r\ndo all the work!\r\n* Can format current line, current selection, current document, or\r\nauto-format the entire document based on specified trigger characters.\r\n\r\nUsage\r\n-----\r\n\r\n### UI Functionality\r\n\r\nActivate the plugin using Geany's Plugin Manager dialog. Once activated\r\nit will place a new `Code Format` item in the `Tools` menu inside the\r\nmain menu. You can access basic functionality from here. The items and\r\nsubmenu's will automatically become enabled or disabled as certain\r\nfeatures cannot be used (ex. trying to format with no open documents or\r\ndocuments with unsupported filetypes).\r\n\r\n### Keybindings\r\n\r\nThere are two keybindings available, one to format the current\r\nselection (or current line if there is no selection), the other to\r\nformat the entire document. You can set the keybindings through Geany's\r\nmain Preferences dialog in the Keybindings tab.\r\n\r\n### Preferences\r\n\r\nThe preferences are broken into two parts. The first is a regular\r\n`.conf` file containing your settings for the Code Format plugin\r\nitself, like where to find the `clang-format` utility, or whether\r\nauto-formatting is enabled. The second type of preferences are those\r\nsepcified in `YAML` files and are read by the `clang-format` utility\r\nto control how the code is formatted. This section discusses the former.\r\n\r\nThe user preferences are stored in a file named `code-format.conf`\r\nfound in under the Geany configuration directory inside the `plugins`\r\ndirectory. The project-specific settings are stored inside the\r\nactual Geany project file (usally ends with `.geany`).\r\n\r\nIf a project is open, the project-specific preferences take effect and\r\ncan be changed using the Project Preferences dialog accessible through\r\nGeany's `Project` menu. If no project is opened, then the user\r\npreferences are used and can be changed using the Plugin Preferences\r\ndialog accessible through Geany's `Edit` menu. If you change the\r\nuser preferences while a project is open, the changes made won't take\r\neffect until there is no project open.\r\n\r\nIn the configuration files, Code Format settings are stored in the\r\n`[code-format]` group.\r\n\r\n#### ClangFormat Path\r\n\r\nThis setting specifies the path to the `clang-format` utility that\r\nis part of ClangTools. If the executable is found in the `PATH`\r\nenvironment variable, you can just put `clang-format` otherwise,\r\nyou can choose the full path to the binary. When a valid executable\r\nfile is found, an \"OK\" icon will appear in the text box, otherwise\r\nan \"error\" icon will appear. It only means that the file is found\r\nand is executable, not that it's actually `clang-format`.\r\n\r\nIn the configuration file, this setting is known as `clang-format-path`.\r\n\r\n#### Style\r\n\r\nThis setting controls whether to use one of the preset code formatting\r\nstyles available from `clang-format` or whether to use a Custom\r\n`.clang-format` file to control the code formatting style. If you\r\nselect one of the presets, you can click on the `Create` button to\r\nopen a new YAML document in Geany containing the code formatting\r\nsettings based on the selected item that you can tailor to suit\r\nyour specific code formatting style.\r\n\r\nIn the configuration file, this setting is known as `style` and can\r\nbe (at present) one of `llvm`, `google`, `chromium`, `mozilla` or\r\n`custom`.\r\n\r\n#### Format on Save\r\n\r\nThis setting controls whether the active document will be formatted just\r\nbefore Geany saves it. This is especially useful if you don't like to\r\nenable the auto-formatting option but still want mostly-automatic\r\nformatting of the code.\r\n\r\nIn the configuration file, this setting is known as `format-on-save`.\r\n\r\n#### Auto-Format\r\n\r\nThis setting controls whether the current document is formatted\r\nautomatically when one of a specific set of trigger characters are\r\ntyped. Even though it is not on by default, it is recommended that\r\nyou use this feature, and only turn if off if you find it annoying\r\nor it gets too slow on large documents.\r\n\r\nIn the configuration file, this setting is known as `auto-format`.\r\n\r\n#### Trigger Characters\r\n\r\nWhen `auto-format` is enabled, this setting controls the characters\r\nwhich when typed will cause the document to be re-formatted. The\r\ndefault set \"`)}];`\" seems to work well but you might like to\r\ncustomize these a bit. You probably don't want to use \"`\\n`\" (newline)\r\nor similar.\r\n\r\nIn the configuration file, this setting is known as\r\n`auto-format-trigger-chars`.\r\n\r\nClangFormat Information\r\n-----------------------\r\n\r\n[ClangFormat](http://clang.llvm.org/docs/ClangFormat.html) is part\r\nof the [ClangTools](http://clang.llvm.org/docs/ClangTools.html) set\r\nof utilities. You must install the `clang-format` utility in order\r\nto use the Code Format plugin for Geany. You can configure which\r\n`clang-format` executable gets used in the Preferences (see above).\r\nIt is **HIGHLY** recommended that you read the documentation for\r\n`clang-format` (at the above link) before using the Code Format\r\nplugin, in order to have any clue how it works.\r\n\r\nIt's important to note that various features documented or available\r\nthrough the user interface may not actually be supported by your\r\nversion of `clang-format`. It is recommended to always use the\r\nlatest version although it seems to handle unknown options and\r\nsuch gracefully.\r\n\r\n### Configuration\r\n\r\nIf you're using one of the preset code formatting styles (see\r\nPreferences), you basically don't have to configure anything for\r\n`clang-format`. The presets are equivalent to running:\r\n\r\n    $ clang-format -style=<NAME_OF_STYLE> ...\r\n\r\nWhere `<NAME_OF_STYLE>` is not equal to `file`.\r\n\r\nIf you're using a custom `.clang-format` file, you should configure it\r\nas per ClangFormat's documentation. It's a YAML file with readable\r\nnames and you should be able to figure it out while referencing the\r\nClangFormat documentation (at the above link). The custom configuration\r\nis equivalent to running:\r\n\r\n    $ clang-format -style=file ...\r\n\r\nThe special name `file` tells `clang-format` to read `.clang-format`\r\nfiles instead of using a preset.\r\n\r\nTo get started, you can base your custom configuration on one of the\r\npresets by using the \"Create\" button in the preferences dialog with\r\nthe desired preset selected in the list (see Preferences). The \"Create\"\r\nbutton is equivalent to running:\r\n\r\n    $ clang-format -style=<SELECTED_PRESET> -dump-config\r\n\r\nWhere `<SELECTED_PRESET>` is the preset chosen in the Style list when\r\nthe button is pressed. The output of the command is placed into a\r\nnew unsaved document named `.clang-format`. You should then save it in\r\na directory (see below) and customize it according to your needs.\r\n\r\nThe `.clang-format` file should be saved at or above the document(s)\r\nyou want formatting to work for. For example you can put it straight\r\ninto the source directory or you can put it at the root of your\r\nproject directory and it will affect all subdirectories (unless a\r\ncertain subdirectory has a `.clang-format` file as well). Because\r\nof this functionality, it is required that a document has been saved\r\non disk before so that the plugin can determine in which directory\r\nto start looking for `.clang-format` files. If you try and use the\r\nplugin on a new, never before saved document, the plugin simply\r\nwon't function and it will print some message to Geany's standard\r\noutput.\r\n\r\nAuthor and Contact\r\n------------------\r\n\r\nThe Code Format plugin was written by and is maintained by\r\nMatthew Brush <matt(at)geany(dot)org>. You can report any issues\r\non the Github Issues page (TODO link) or provide any improvement\r\nby making a Pull Request on Github.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}